/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package io.github.qux7.testnotrunerror

import org.gradle.api.GradleException
import org.gradle.api.NamedDomainObjectContainer
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.tasks.testing.Test
import org.gradle.util.GradleVersion

import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicInteger
import java.util.regex.Pattern

/**
 * Gradle plugin: report tests that were not run.
 */
public class TestNotRunErrorPlugin implements Plugin<Project> {
    static String classCheckErrorMessagePrefix = "Test classes are present but tests were not executed:"
    static String javaSourceCheckErrorMessagePrefix = "Java source files are present but tests were not executed:"
    static String testFilterDetected = "no error because --tests was specified on the command line"
    static String stopOnFailureDisabled = "no error because `testnotrunerror { stopOnFailure = false }` was specified"
    static String applyMessage = "APPLYING TestNotRunErrorPlugin: REPORT TESTS THAT WERE NOT RUN DUE TO A DEPENDENCY/CONFIGURATION ERROR"
    static String whenFailure_Message = "To treat errors as warnings, use 'testnotrunerror { stopOnFailure=false }' in the build script, or '-Ptestnotrunerror.stopOnFailure=false' on the command line"
    static String disabledOnCmdlMessage = "TestNotRunErrorPlugin was disabled with -Ptestnotrunerror.enabled=false on the command line";
    static String disabledInCfgMessage = "TestNotRunErrorPlugin was disabled with 'testnotrunerror { enabled = false }'";
    static String useWarningInstead_Message = "Use 'stopOnFailure=false' instead of 'enabled=false' to see error messages as warnings"

    public void apply(Project project) {
        println(applyMessage)
        println("Gradle version: " + GradleVersion.current().version + "; Groovy version: " + GroovySystem.version + "; Java version: " + System.getProperty("java.version"));
        def extension = project.extensions.create("testnotrunerror", TestNotRunErrorPluginExtension)
        NamedDomainObjectContainer<TestTaskExcludeClassNames> perTaskExcludes = project.container(TestTaskExcludeClassNames)
//        perTaskExcludes.all {
//            excludeClassNames = []
//        }
        extension.extensions.excludes = perTaskExcludes

        project.tasks.withType(Test) {
            def runTestSet = ConcurrentHashMap.newKeySet()
            def testCount = new AtomicInteger();
            def exceptionMessage1 = ""
            def exceptionMessage2 = ""
            doFirst {
                println("doFirst0 "+extension)
                boolean wasEnabled = extension.enabled
                extension.setFromCommandLineProperties(project)
                println("doFirst1 "+extension)
                if (!extension.enabled) {
                    println(wasEnabled ? disabledInCfgMessage : disabledOnCmdlMessage)
                    println(useWarningInstead_Message)
                }
            }
            afterTest { desc, res ->
                if (extension.enabled) {
                    println("afterTest: " + extension)
                    println("afterTest: this prop=" + project.findProperty("testnotrunerror")) ////
                    println("afterTest: root prop=" + project.rootProject.findProperty("testnotrunerror")) ////
                    //println("afterTest: prop="+findProperty("testnotrunerror.enabled")) ////
                    println("afterTest: this prop=" + project.findProperty("testnotrunerror.enabled")) ////
                    println("afterTest: root prop=" + project.rootProject.findProperty("testnotrunerror.enabled")) ////
                }
            }
            afterTest { desc, res ->
                if (extension.enabled) {
                    runTestSet.add(desc.className);
                    testCount.incrementAndGet()
                }
            }

            doLast {
                if (extension.enabled) {
                    println("[$name] Total tests run: ${testCount.get()}")
                }
            }

            doLast {
                if (extension.enabled) {
                    if (extension.checkClasses) {
                        def compiledTestSet = getCompiledClassNames(testClassesDirs)
//                    println('^^^^^^^^^^^^^^^^^^')
//                    println("name=$name")
//                    println("perTaskExcludes=$perTaskExcludes")
//                    println("perTaskExcludes[name]=" + perTaskExcludes?.findByName(name))
                        def excludes = perTaskExcludes?.findByName(name)?.excludeClassNames ?: []
                        def diff = compiledTestSet - runTestSet - excludes
//                    println("compiledTestSet=$compiledTestSet")
//                    println("runTestSet=$runTestSet")
//                    println("excludes=$excludes")
//                    println("diff=$diff")
                        if (diff) {
                            String msg = "[$name] $classCheckErrorMessagePrefix ${new TreeSet<>(diff)}"
                            println(msg)
//                        if (extension.stopOnFailure) {
                            exceptionMessage1 = msg
//                        }
                        }
                    }
                }
            }

            doLast {
                if (extension.enabled) {
                    if (extension.checkJavaSources) {
                        def javaDirs = project.sourceSets[name].java.srcDirs
//                    println("task $name srcDirs: $javaDirs")
                        def javaSourceTestSet = getClassNamesFromSources(javaDirs)
                        def excludes = perTaskExcludes?.findByName(name)?.excludeClassNames ?: []
                        def diff = javaSourceTestSet - runTestSet - excludes
//                    println("javaSourceTestSet=$javaSourceTestSet")
//                    println("runTestSet=$runTestSet")
//                    println("excludes=$excludes")
//                    println("diff=$diff")
                        if (diff) {
                            String msg = "[$name] $javaSourceCheckErrorMessagePrefix ${new TreeSet<>(diff)}"
                            println(msg)
//                        if (extension.stopOnFailure) {
                            exceptionMessage2 = msg
//                        }
                        }
                    }
                }
            }

            doLast {
                if (extension.enabled) {
                    if (exceptionMessage1 || exceptionMessage2) {
                        if (filter.commandLineIncludePatterns) {
                            println("[$name] $testFilterDetected")
                        } else if (!extension.stopOnFailure) {
                            println("[$name] $stopOnFailureDisabled")
                        } else {
                            println("[$name] $whenFailure_Message")
                            throw new GradleException([exceptionMessage1, exceptionMessage2].findAll().join("; "))
                        }
                    }
                }
            }
        }
    }
    static def getCompiledClassNames(classesDirs) {
        def testClassSet = ConcurrentHashMap.newKeySet()
        def sep = Pattern.quote(File.separator)
        classesDirs.each {
            if (it.exists()) {
                def dir = it.toString()+File.separator;
                it.eachFileRecurse {
                    if (it ==~ /.*$sep[A-Za-z_][A-Za-z0-9_]*\.class/) {
                        testClassSet += (it.toString()-dir-'.class').replaceAll(sep,'.')
                    }
                }
            }
        }
        return testClassSet
    }
    static def getClassNamesFromSources(javaDirs) {
        def testClassSet = ConcurrentHashMap.newKeySet()
        def sep = Pattern.quote(File.separator)
        javaDirs.each {
            if (it.exists()) {
                def dir = it.toString()+File.separator;
                it.eachFileRecurse {
                    if (it ==~ /.*$sep[A-Za-z_][A-Za-z0-9_]*\.java/) {
                        testClassSet += (it.toString()-dir-'.java').replaceAll(sep,'.')
                    }
                }
            }
        }
        return testClassSet
    }
}



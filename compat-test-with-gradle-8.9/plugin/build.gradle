/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.9/userguide/custom_plugins.html in the Gradle documentation.
 */

buildscript {
    dependencies {
        classpath(files('../build-with-gradle-6.2.1/build/libs/testnotrunerror-0.1.0.jar'))
    }
}

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'org.ajoberstar.stutter' version '1.0.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

//dependencies {
//    compatTestImplementation files('../../build-with-gradle-6.2.1/build/libs/testnotrunerror-0.1.0.jar')
//}

// !!stutter {{
// otherwise: java.lang.UnsupportedClassVersionError: ... compiled by a more recent version of the Java Runtime ...
java {
    targetCompatibility = JavaVersion.VERSION_1_8
}
// }} !!stutter


// !!stutter {{
// for a real modern example, see stutter { ... } in https://github.com/ajoberstar/gradle-stutter/blob/main/build.gradle.kts
stutter {
  // if true, only match min/max within that otherwise matches your compatibility specs in each Gradle major version
  //sparse = false // defaults to true

  matrices {
    java11 {
      javaToolchain {
        languageVersion = JavaLanguageVersion.of(11)
      }
      gradleVersions {
        compatibleRange '6.0', '6.9.3'
      }
    }
  }
}
// }} !!stutter


dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation libs.spock.core
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

// !!stutter {{
    compatTestImplementation libs.spock.core
//    compatTestRuntimeOnly files('../../build-with-gradle-6.2.1/build/libs/testnotrunerror-0.1.0.jar')
    compatTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
// }} !!stutter
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'org.example.greeting'
            implementationClass = 'org.example.UsestutterPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

// !!stutter {{
tasks.withType(Test) { // tasks.withType() to include compatTest
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
// }} !!stutter


// {{ show running tests
tasks.withType(Test) {
    testLogging.showStandardStreams = true
}
tasks.withType(Test) {
    beforeTest { desc -> println(" $desc.className $desc.name ...")}
    afterTest { desc, res -> println(" $desc.className $desc.name $res")}
    afterSuite {desc, res -> println("after suite [$desc.name] $desc.className: $res")}
}
// }} show running tests

// pass the task name to the tests
tasks.withType(Test) {
    systemProperty 'taskName', name
}

tasks.named('check') {
    dependsOn 'compatTest'
}

//println("************** gradle.build "+new File(".").getAbsolutePath())
//println("************** gradle.build "+file(new File(".")).getAbsolutePath())
//println("************** gradle.build "+sourceSets.compatTest.runtimeClasspath)
//sourceSets.compatTest.runtimeClasspath.forEach { println(it) }
